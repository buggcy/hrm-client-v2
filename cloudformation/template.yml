AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Env:
    Type: String
    Default: dev
    Description: "Name of current env (eg. test, prod)"
  DomainName:
    Default: dev.platform.tavus.io
    Description: The DNS name of an Amazon Route 53 hosted zone
    Type: String
  HostedZoneId:
    Type: String
    Default: Z013084135OBL7TN95DU4

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-s3-origin-oai

  StaticResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub tavus-developer-portal-${Env}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: _not-found.html
    DependsOn:
      - "Certificate"

  StaticResourcesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref StaticResourcesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${StaticResourcesBucket}/*

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: !Sub S3OriginPortal${Env}
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt URLRewriteFunction.FunctionARN
        CustomErrorResponses:
          - ErrorCachingMinTTL: 10
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/_not-found.html'
        Origins:
          - DomainName: !Sub ${StaticResourcesBucket}.s3.${AWS::Region}.amazonaws.com
            Id: !Sub S3OriginPortal${Env}
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
      Tags:  
        - Key: env
          Value: newdeveloperportal
    DependsOn:
      - "StaticResourcesBucket"

  URLRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-url-rewrite
      AutoPublish: true
      FunctionConfig:
        Comment: Rewrite URLs for Next.js static export
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
          
          // Remove trailing slash except for the root
          if (uri.length > 1 && uri.endsWith('/')) {
            uri = uri.slice(0, -1);
          }

          // Handle root path
          if (uri === '' || uri === '/') {
            request.uri = '/index.html';
            return request;
          }

          // Check if the URI ends with .html
          if (!uri.endsWith('.html')) {
            // If it doesn't end with .html, append .html
            request.uri = uri + '.html';
          }

          return request;
        }

  HostedZoneRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Distribution.DomainName
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Distribution.DomainName
    DependsOn:
      - "Distribution"

Outputs:
  WebsiteURL:
    Value: !Sub 'https://${DomainName}'
    Description: URL for website hosted on S3
  CloudFrontDistributionId:
    Value: !Ref Distribution
    Description: CloudFront Distribution ID